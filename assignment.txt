week1 
1. Given an array of nonnegative integers, design a linear algorithm and implement it using a program 
to find whether given key element is present in the array or not. Also, find total number of
comparisons for each input case. (Time Complexity = O(n), where n is the size of input)

Algorithm:

Start
Read The number of test cases T
For each test case:
Read the size of the array n
Create an integer array of size n
Read the n elements of the array
Read the key element to search
Initialize a counter variable comparisons to 0
For i = 0 to n-1 do the following:
Increment comparisons by 1
If arr[i] is equal to key, then do the following:
Output "Present"
Break the loop
If the loop completed without finding a match, then do the following:
Output "Not Present"
Output the value of comparisons as the number of comparisons performed to search for the key element

#include <stdio.h>

int main() {
    int T;
    scanf("%d", &T); // read number of test cases
    while (T--) {
        int n, key, i;
        int comparisons = 0;
        scanf("%d", &n); // read size of array
        int arr[n];
        for (i = 0; i < n; i++) {
            scanf("%d", &arr[i]); // read array elements
        }
        scanf("%d", &key); // read key element
        for (i = 0; i < n; i++) {
            comparisons++;
            if (arr[i] == key) {
                printf("Present\n");
                break;
            }
        }
        if (i == n) {
            printf("Not Present\n");
        }
        printf("Number of comparisons: %d\n", comparisons);
    }
    return 0;
}

2.. Given an already sorted array of positive integers, design an algorithm and implement it using a
program to find whether given key element is present in the array or not. Also, find total number
of comparisons for each input case. (Time Complexity = O(logn), where n is the size of input).

#include <stdio.h>

int binary_search(int arr[], int n, int key, int *comparisons) {
    int low = 0, high = n - 1;
    while (low <= high) {
        *comparisons += 1;
        int mid = (low + high) / 2;
        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}

int main() {
    int T;
    scanf("%d", &T); // read number of test cases
    while (T--) {
        int n, key, i;
        int comparisons = 0;
        scanf("%d", &n); // read size of array
        int arr[n];
        for (i = 0; i < n; i++) {
            scanf("%d", &arr[i]); // read array elements
        }
        scanf("%d", &key); // read key element
        int result = binary_search(arr, n, key, &comparisons);
        if (result == -1) {
            printf("Not Present\n");
        } else {
            printf("Present\n");
        }
        printf("Number of comparisons: %d\n", comparisons);
    }
    return 0;
}

1. Read the number of test cases T from the user
2. For each test case, do the following:
   a. Read the size of the array n from the user
   b. Declare an integer array of size n
   c. Read the array elements from the user and store them in the array
   d. Read the key element to be searched from the user
   e. Initialize a counter variable comparisons to 0
   f. Call the binary_search function with the array, its size, the key element, and a pointer to the comparisons variable
   g. If the binary_search function returns -1, print "Not Present"
      Otherwise, print "Present"
   h. Print the value of the comparisons variable
3. End of program

Function binary_search(arr, n, key, comparisons):
1. Initialize low = 0 and high = n - 1
2. While low <= high, do the following:
   a. Increment comparisons by 1
   b. Compute mid = (low + high) / 2
   c. If arr[mid] equals key, return mid
   d. If arr[mid] < key, set low = mid + 1
   e. If arr[mid] > key, set high = mid - 1
3. If the key is not found, return -1

3. Given an already sorted array of positive integers, design an algorithm and implement it using a
program to find whether a given key element is present in the sorted array or not. For an array
arr[n], search at the indexes arr[0], arr[2], arr[4],. ,arr[2k] and so on. Once the interval (arr[2k] <
key < arr[ 2k+1] ) is found, perform a linear search operation from the index 2k
to find the element
key. (Complexity < O(n), where n is the number of elements need to be scanned for searching):
Jump Search

1. Read the number of test cases T from the user
2. For each test case, do the following:
   a. Read the size of the array n from the user
   b. Declare an integer array of size n
   c. Read the array elements from the user and store them in the array
   d. Read the key element to be searched from the user
   e. Initialize a counter variable comparisons to 0
   f. Call the jump_search function with the array, its size, the key element, and a pointer to the comparisons variable
   g. If the jump_search function returns -1, print "Not Present"
      Otherwise, print "Present"
   h. Print the value of the comparisons variable
3. End of program

Function jump_search(arr, n, key, comparisons):
1. Initialize step = sqrt(n) and prev = 0
2. While arr[min(step, n) - 1] < key, do the following:
   a. Increment comparisons by 1
   b. Set prev = step
   c. Set step = step + sqrt(n)
   d. If prev >= n, return -1
3. Perform a linear search in the interval [prev, min(step, n)] for the key element
   a. Increment comparisons by 1 for each comparison made during the search
   b. If the key element is found, return its index
4. If the key element is not found, return -1


#include <stdio.h>
#include <math.h>

int jump_search(int arr[], int n, int key, int *comparisons) {
    int step = sqrt(n);
    int prev = 0;
    while (arr[min(step, n) - 1] < key) {
        (*comparisons)++;
        prev = step;
        step += sqrt(n);
        if (prev >= n) {
            return -1;
        }
    }
    while (arr[prev] < key) {
        (*comparisons)++;
        prev++;
        if (prev == min(step, n)) {
            return -1;
        }
    }
    if (arr[prev] == key) {
        (*comparisons)++;
        return prev;
    }
    return -1;
}

int main() {
    int T, n, key, comparisons;
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &n);
        int arr[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        scanf("%d", &key);
        comparisons = 0;
        int index = jump_search(arr, n, key, &comparisons);
        if (index == -1) {
            printf("Not Present\n");
        } else {
            printf("Present\n");
        }
        printf("%d\n", comparisons);
    }
    return 0;
}


week 3:

1.Given an unsorted array of integers, design an algorithm and a program to sort the array using
insertion sort. Your program should be able to find number of comparisons and shifts ( shifts -
total number of times the array elements are shifted from their place) required for sorting the array.
Input Format:
The first line contains number of test cases, T.
For each test case, there will be two input lines.
First line contains n (the size of array).
Second line contains space-separated integers describing array.
Output Format:
The output will have T number of lines.
For each test case T, there will be three output lines.
First line will give the sorted array.
Second line will give total number of comparisons.
Third line will give total number of shift operations required

#include <stdio.h>

int main() {
    int t, n, i, j, key, comp_count, shift_count;
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &n);
        int arr[n];
        for (i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        comp_count = 0;
        shift_count = 0;
        for (i = 1; i < n; i++) {
            key = arr[i];
            j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j+1] = arr[j];
                j = j - 1;
                shift_count++;
                comp_count++;
            }
            arr[j+1] = key;
            shift_count++;
        }
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\nTotal comparisons: %d\nTotal shifts: %d\n", comp_count, shift_count);
    }
    return 0;
}

Start
Read the number of test cases T
While T > 0 repeat steps 4-12
Read the size of the array n
Declare an integer array arr of size n
Read n integers into the array arr
Initialize comp_count to 0 and shift_count to 0
For i = 1 to n-1 do steps 9-14
Assign arr[i] to key
Assign i-1 to j
While j >= 0 and arr[j] > key do steps 12-13
Assign arr[j] to arr[j+1]
Decrement j by 1 and increment comp_count and shift_count by 1
Assign key to arr[j+1] and increment shift_count by 1
End loop
Print the sorted array
Print the total number of comparisons and total number of shifts
Decrement T by 1
End loop
Stop.

2.
Start with the first element of the array as the current minimum.
Iterate through the array from the second element to the end.
For each element, compare it with the current minimum element.
If the current element is smaller than the current minimum, update the current minimum to be the current element.
After the end of the inner loop, swap the current minimum element with the first unsorted element of the array.
Repeat steps 2-5 until the entire array is sorted.
Count the number of comparisons made during the sorting process.
Count the number of swaps made during the sorting process.
Print the sorted array, total number of comparisons, and total number of swaps.

#include <stdio.h>

int main() {
    int t, n, i, j, min_idx, temp, comp_count, swap_count;
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &n);
        int arr[n];
        for (i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        comp_count = 0;
        swap_count = 0;
        for (i = 0; i < n-1; i++) {
            min_idx = i;
            for (j = i+1; j < n; j++) {
                comp_count++;
                if (arr[j] < arr[min_idx]) {
                    min_idx = j;
                }
            }
            temp = arr[i];
            arr[i] = arr[min_idx];
            arr[min_idx] = temp;
            swap_count++;
        }
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\nTotal comparisons: %d\nTotal swaps: %d\n", comp_count, swap_count);
    }
    return 0;
}


3.Read the number of test cases T.
Repeat the following steps T times:
a. Read the size of the array, n.
b. Declare an array of size n.
c. Read the elements of the array.
d. Sort the array using any sorting algorithm with time complexity O(n log n).
e. Traverse the sorted array and compare the adjacent elements. If any two adjacent elements are the same,
set a flag to 1 and break the loop.
f. If the flag is set to 1, print 'YES'. Otherwise, print 'NO'.

#include <stdio.h>

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++) {
        L[i] = arr[l + i];
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[m + 1 + j];
    }
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int hasDuplicates(int arr[], int n) {
    int i, flag = 0;
    mergeSort(arr, 0, n - 1);
    for (i = 0; i < n - 1; i++) {
        if (arr[i] == arr[i + 1]) {
            flag = 1;
            break;
        }
    }
    return flag;
}

int main() {
    int t, n, i;
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &n);
        int arr[n];
        for (i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        if (hasDuplicates(arr, n)) {
            printf("YES\n");
        }
        else {
            printf("NO\n");
        }
    }
    return 0;
}
